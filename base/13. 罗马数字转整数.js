// 罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。

// 字符          数值
// I             1
// V             5
// X             10
// L             50
// C             100
// D             500
// M             1000
// 例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。

// 通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：

// I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。
// X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 
// C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。
// 给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。

/**
 * @param {string} s
 * @return {number}
 */
 var romanToInt = function(s) {
  const l = {
      I: {
        I: 1,
        V: 1,
        X: 1,
        L: 1,
        C: 1,
        D: 1,
        M: 1,
      },
      V: {
        I: 3,
        V: 5,
        X: 5,
        L: 5,
        C: 5,
        D: 5,
        M: 5
      },
      X: {
        I: 8,
        V: 10,
        X: 10,
        L: 10,
        C: 10,
        D: 10,
        M: 10
      },
      L: {
        I: 50,
        V: 50,
        X: 30,
        L: 50,
        C: 50,
        D: 50,
        M: 50
      },
      C: {
        I: 100,
        V: 100,
        X: 80,
        L: 100,
        C: 100,
        D: 100,
        M: 100
      },
      D: {
        I: 500,
        V: 500,
        X: 500,
        L: 500,
        C: 300,
        D: 500,
        M: 500,
      },
      M: {
        I: 1000,
        V: 1000,
        X: 1000,
        L: 1000,
        C: 800,
        D: 1000,
        M: 1000,
      }
    }
    let num = 0
    num = l[s[0]][s[0]]
    console.log('------------------------------')
    for (let i = 1; i < s.length; i++) {
      const prex = s[i - 1]
      const obj = l[s[i]]
      num += obj[prex]
    }
    return num
  };